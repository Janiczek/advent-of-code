module Year2019.Day08 exposing (Input1, Input2, Output1, Output2, compute1, compute2, input_, main, parse1, parse2, tests1, tests2)

import Advent
    exposing
        ( Test
          -- , unsafeToInt
          -- , unsafeMaybe
        )
import Dict
import Dict.Extra
import List.Extra



-- 1. TYPES (what is the best representation of the problem?)


type alias Input1 =
    List (List Int)


type alias Input2 =
    List (List Int)


type alias Output1 =
    Int


type alias Output2 =
    Int



-- 2. PARSE (mangle the input string into the representation we decided on)


width : Int
width =
    25


height : Int
height =
    6


parse1 : String -> Input1
parse1 string =
    let
        ints =
            String.toList string
                |> List.map charToInt
    in
    List.Extra.groupsOf (width * height) ints


charToInt : Char -> Int
charToInt char =
    -- 48 == '0'
    Char.toCode char - 48


parse2 : String -> Input2
parse2 string =
    parse1 string



-- 3. COMPUTE (actually solve the problem)


compute1 : Input1 -> Output1
compute1 layers =
    let
        layerWithLeast0Digits =
            layers
                |> List.sortBy
                    (\layer ->
                        layer
                            |> List.filter ((==) 0)
                            |> List.length
                    )
                |> List.head
                |> Advent.unsafeMaybe

        freqs =
            Dict.Extra.frequencies layerWithLeast0Digits

        ones =
            Dict.get 1 freqs |> Advent.unsafeMaybe

        twos =
            Dict.get 2 freqs |> Advent.unsafeMaybe
    in
    ones * twos


compute2 : Input2 -> Output2
compute2 layers =
    let
        transposed =
            List.Extra.transpose layers

        firstVisiblePixel : List Int -> Int
        firstVisiblePixel layer =
            layer
                |> List.Extra.dropWhile ((==) 2)
                |> List.head
                |> Advent.unsafeMaybe

        visiblePixels : List Int
        visiblePixels =
            transposed
                |> List.map firstVisiblePixel
                |> print
    in
    -1


print : List Int -> List Int
print image =
    let
        _ =
            image
                |> List.map
                    (\int ->
                        if int == 1 then
                            "#"

                        else
                            " "
                    )
                |> List.Extra.groupsOf width
                |> List.reverse
                |> List.map (String.concat >> Debug.log "")
    in
    image



-- 4. TESTS (uh-oh, is this problem a hard one?)


tests1 : List (Test Input1 Output1)
tests1 =
    [{- Test "example"
        "input"
        Nothing -- Just "parsed-input"
        -1
     -}
    ]


tests2 : List (Test Input2 Output2)
tests2 =
    []



-- BOILERPLATE (shouldn't have to touch this)


input_ : String
input_ =
    """

"""
        |> Advent.removeNewlinesAtEnds


main : Program () ( Output1, Output2 ) Never
main =
    Advent.program
        { input = input_
        , parse1 = parse1
        , parse2 = parse2
        , compute1 = compute1
        , compute2 = compute2
        , tests1 = tests1
        , tests2 = tests2
        }
